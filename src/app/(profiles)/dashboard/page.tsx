'use client';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { UserProfile } from '@/scripts/types/dashboard';
import { EditProfile } from '@/components/EditProfile';
import Loader from '@/components/Loader';
import NothingFound from '@/components/NothingFound';
import { DialogClose } from '@/components/ui/dialog';
import { toast } from '@/components/ui/use-toast';
import { checkValues, searchLocalStorage } from '@/scripts/check-user-auth';
import { Dialog, DialogTrigger, DialogContent } from '@radix-ui/react-dialog';
import { Share, X } from 'lucide-react';
import Link from 'next/link';
import Image from 'next/image';
import React, { useEffect, useState } from 'react';
import { SelectItems } from '@/components/SelectItems';
import { cn } from '@/lib/utils';
import { Progress } from '@/components/ui/progress';

const Page: React.FC = () => {
  const [user, setUser] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(false);
  const [editProfileTriggered, setEditProfileTriggered] = useState(false);

  useEffect(() => {
    setLoading(true);
    const fetchData = async () => {
      const userPresent: boolean = await checkValues();
      if (!userPresent) {
        window.location.href = '/signin';
      }
      if (process.browser) {
        const { authorization, userId } = searchLocalStorage();
        try {
          const res = await fetch(
            `${process.env.NEXT_PUBLIC_SERVER_URL}/dashboard/profile`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                authorization,
                user_id: userId,
              },
            },
          );

          const userData: UserProfile = await res.json();
          setUser(userData);
          setLoading(false);

          const urlParams = new URLSearchParams(window.location.search);
          if (urlParams.has('editProfile')) {
            setEditProfileTriggered(true);
          }
        } catch (error) {
          console.error(error);
          setLoading(false);
        }
      }
    };

    fetchData();
  }, []);

  if (!user) {
    return <NothingFound />;
  }

  return (
    <div className="container mx-auto mt-8 justify-center items-center">
      {loading ? (
        <Loader />
      ) : (
        <>
          <div>
            <div className="flex flex-col gap-4 justify-between sm:flex-row">
              <div className="flex flex-col sm:flex-row gap-8">
                {/* <div> */}
                <img
                  src={`${process.env.NEXT_PUBLIC_SERVER_URL}/i/${user.photo}`}
                  alt="User Photo"
                  className="rounded-full w-40 h-40 object-cover border-2 border-black"
                />
                <p className=" text-muted-foreground">*auto AI generated</p>
                {/* <p className='text-gray-500'>*random photo generated by Photo AI at SynthAI Labs</p> */}
                {/* </div> */}
                <div>
                  <h1 className="text-2xl font-bold">{user.name}</h1>
                  <p className="mt-2 font-medium">{user.email}</p>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row">
                <div>
                  <Button
                    variant="ghost"
                    onClick={() => {
                      navigator.clipboard.writeText(
                        `${process.env.NEXT_PUBLIC_CLIENT_URL}/p/${user.username}`,
                      );
                      toast({
                        title: 'Link copied to clipboard',
                        description:
                          'URL: ' +
                          `${process.env.NEXT_PUBLIC_CLIENT_URL}/p/${user.username}`,
                      });
                    }}
                  >
                    <Share className="w-6 h-6" />
                  </Button>
                </div>
                <div className="mt-4 sm:mt-0">
                  <Dialog open={editProfileTriggered}>
                    <DialogTrigger asChild>
                      <Button
                        onClick={(event: React.MouseEvent<HTMLButtonElement>) =>
                          setEditProfileTriggered(true)
                        }
                        variant="outline"
                        className="hover:bg-gray-900 hover:text-white"
                      >
                        Edit Profile
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-md fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 bg-opacity-50 backdrop-filter backdrop-blur-md">
                      <Tabs defaultValue="account" className="w-[400px]">
                        <TabsList className="grid w-full grid-cols-2">
                          <TabsTrigger value="account">Account</TabsTrigger>
                          <TabsTrigger value="userSettings">
                            User Settings
                          </TabsTrigger>
                        </TabsList>
                        <TabsContent value="account">
                          <Card>
                            <CardHeader>
                              <CardTitle>
                                <div className="flex flex-row justify-between">
                                  <h1 className="text-xl font-bold">Account</h1>
                                  <X
                                    className="w-6 h-6 cursor-pointer"
                                    onClick={() =>
                                      setEditProfileTriggered(false)
                                    }
                                  />
                                </div>
                              </CardTitle>
                              <CardDescription>
                                Make changes to your account here. Click save
                                when you&apos;re done.
                              </CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-2">
                              <div className="space-y-1">
                                <Label htmlFor="name">Name</Label>
                                <Input id="name" defaultValue={user.name} />
                              </div>
                              <div className="space-y-1">
                                <Label htmlFor="username">Username</Label>
                                <Input
                                  id="username"
                                  defaultValue={user.email}
                                />
                              </div>

                              <div className="space-y-1">
                                <Label htmlFor="bio">Bio</Label>
                                <Input id="bio" defaultValue={user.bio} />
                              </div>

                              <div className="space-y-1">
                                <Label htmlFor="email">Email</Label>
                                <Input
                                  id="email"
                                  type="email"
                                  defaultValue={user.email}
                                />
                              </div>

                              <div className="space-y-1">
                                <Label htmlFor="interests">Interests</Label>
                                <SelectItems
                                  title={'Interests'}
                                  label={'Interests'}
                                  values={[
                                    'JavaScript',
                                    'TypeScript',
                                    'Web Development',
                                  ]}
                                />
                                {user.interests.map((interest) => (
                                  <div key={interest}>
                                    <Input
                                      id="interests"
                                      defaultValue={interest}
                                    />
                                  </div>
                                ))}
                              </div>
                              <div className="space-y-1">
                                <Label htmlFor="changepassword">
                                  Change Password
                                </Label>
                                {/* <Input id="email" type="pa" defaultValue={user.email} /> */}
                              </div>
                            </CardContent>
                            <CardFooter>
                              <Button>Save changes</Button>
                            </CardFooter>
                          </Card>
                        </TabsContent>
                        <TabsContent value="userSettings">
                          <Card>
                            <CardHeader>
                              <CardTitle>
                                <div className="flex flex-row justify-between">
                                  <h1 className="text-xl font-bold">
                                    User Settings
                                  </h1>
                                  <X
                                    className="w-6 h-6 cursor-pointer"
                                    onClick={() =>
                                      setEditProfileTriggered(false)
                                    }
                                  />
                                </div>
                              </CardTitle>
                              <CardDescription>
                                Make changes to your user Settings here. Click
                                save when you&apos;re done.
                              </CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-2">
                              <div>Not Implemented</div>
                            </CardContent>
                            <CardFooter>
                              <Button>Save changes</Button>
                            </CardFooter>
                          </Card>
                        </TabsContent>
                      </Tabs>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-4 mt-6 min-w-full">
            <Card className="flex">
              <CardHeader>
                <CardTitle className="text-lg font-bold">About Me</CardTitle>
                <div className="mt-4 font-medium justify-center items-center flex mb">
                  {user.bio.length === 0 ||
                  user.bio === null ||
                  user.bio === undefined ? (
                    <p>No bio set</p>
                  ) : (
                    <p className="">{user.bio}</p>
                  )}
                </div>
              </CardHeader>
            </Card>

            <Card className="flex">
              <CardHeader>
                <CardTitle className="text-lg font-bold">Interests</CardTitle>
                <div className="mt-4 font-medium justify-center items-center flex mb">
                  {user.bio.length === 0 ||
                  user.bio === null ||
                  user.bio === undefined ? (
                    <p>No Interests set</p>
                  ) : (
                    <p className="">{user.bio}</p>
                  )}
                </div>
              </CardHeader>
            </Card>
          </div>

          {/* 

            Course NAME

          */}

          <div className="mt-8">
            <h2 className="text-2xl font-bold mb-4">Course Enrollments:</h2>
            {user.CourseEnrollment.length === 0 ? (
              <div className=" h-32 flex flex-col items-center justify-center">
                <div>
                  <p>No courses available</p>
                </div>
                <div className="mt-2">
                  <Link href={'/learn'}>
                    <Button variant={'outline'}>View courses</Button>
                  </Link>
                </div>
              </div>
            ) : (
              <ul className="flex flex-col gap-4 sm:flex-row">
                {user.CourseEnrollment.map((enrollment) => (
                  <Card className={cn('w-[350px]')} key={enrollment.id}>
                    <CardHeader>
                      <CardTitle>{enrollment.name}</CardTitle>
                      <CardDescription>
                        {enrollment.description}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="grid gap-4">
                      <div className=" flex items-center space-x-4 rounded-md border p-4">
                        <div className="flex-1 space-y-1">
                          <Image
                            src={`${process.env.NEXT_PUBLIC_SERVER_URL}/i/${enrollment.image}`}
                            alt={`${enrollment.name} image`}
                            width={300}
                            height={200}
                          />
                        </div>
                      </div>
                      <div className=" flex justify-center items-center">
                        <h1>
                          {enrollment.completed ? 'COMPLETED' : 'IN_PROGRESS'}
                        </h1>
                      </div>
                      <div>
                        <Progress
                          value={
                            (enrollment.progress / enrollment.totalModules) *
                            100
                          }
                        />
                      </div>
                    </CardContent>
                    <CardFooter className=" flex justify-center items-center">
                      <Link href={`/learn/${enrollment.id}`}>
                        <Button className="w-full" variant={'outline'}>
                          View Course
                        </Button>
                      </Link>
                    </CardFooter>
                  </Card>
                ))}
              </ul>
            )}
          </div>

          <div className="mb-4 mt-8">
            <h2 className="text-2xl font-bold mb-4">Achievements:</h2>
            {user.achievements.length === 0 ? (
              <div className=" h-32 flex flex-col items-center justify-center">
                <div>
                  <p>No achievements available</p>
                </div>
                <div className="mt-2">
                  <Link href={'/learn'}>
                    <Button variant={'outline'}>View courses</Button>
                  </Link>
                </div>
              </div>
            ) : (
              <ul className="flex flex-col gap-4 max-w-2xl">
                {user.achievements.map((achievement) => (
                  <Card
                    key={achievement.id}
                    className="pt-6 bg-white rounded shadow"
                  >
                    <CardContent>
                      <span className="font-bold">{achievement.name}:</span>{' '}
                      {achievement.description}
                    </CardContent>
                  </Card>
                ))}
              </ul>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default Page;

// JOSN EXAMPLE:
// {
//     "id": 1,
//     "username": "user1",
//     "photo": "url_to_user1_photo.jpg",
//     "name": "User One",
//     "bio": "Bio for User One",
//     "email": "user1@example.com",
//     "password": "password1",
//     "emailVerified": true,
//     "role": "USER",
//     "token": "demo",
//     "interests": [],
//     "userSettingsId": 1,
//     "achievements": [
//       {
//         "id": 1,
//         "name": "Achievement 1",
//         "icon": "icon1.jpg",
//         "description": "Description for Achievement 1",
//         "courseId": 1,
//         "userId": 1
//       }
//     ],
//     "CourseEnrollment": [
//       {
//         "id": 1,
//         "userId": 1,
//         "courseId": 1,
//         "status": "COMPLETED",
//         "enrolledAt": "2023-12-21T15:32:45.558Z",
//         "completedAt": null
//       },
//       {
//         "id": 2,
//         "userId": 1,
//         "courseId": 2,
//         "status": "IN_PROGRESS",
//         "enrolledAt": "2023-12-21T15:32:45.561Z",
//         "completedAt": null
//       }
//     ],
//     "settings": {
//       "id": 1,
//       "userId": 1,
//       "publicProfile": true,
//       "publicEmail": false,
//       "publicBio": true,
//       "publicPhoto": true,
//       "publicName": true,
//       "publicInterests": true
//     }
//   }
